// Code generated by mockery v2.9.6. DO NOT EDIT.

package mocks

import (
	entities "github.com/felipepnascimento/challenge-bravo-flp/entities"
	mock "github.com/stretchr/testify/mock"
)

// CurrencyRepository is an autogenerated mock type for the CurrencyRepository type
type CurrencyRepository struct {
	mock.Mock
}

// CreateCurrency provides a mock function with given fields: currency
func (_m *CurrencyRepository) CreateCurrency(currency *entities.Currency) error {
	ret := _m.Called(currency)

	var r0 error
	if rf, ok := ret.Get(0).(func(*entities.Currency) error); ok {
		r0 = rf(currency)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteCurrency provides a mock function with given fields: id
func (_m *CurrencyRepository) DeleteCurrency(id int) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllCurrencies provides a mock function with given fields:
func (_m *CurrencyRepository) GetAllCurrencies() (*[]entities.Currency, error) {
	ret := _m.Called()

	var r0 *[]entities.Currency
	if rf, ok := ret.Get(0).(func() *[]entities.Currency); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]entities.Currency)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCurrencyBy provides a mock function with given fields: column, value
func (_m *CurrencyRepository) GetCurrencyBy(column string, value string) (*entities.Currency, error) {
	ret := _m.Called(column, value)

	var r0 *entities.Currency
	if rf, ok := ret.Get(0).(func(string, string) *entities.Currency); ok {
		r0 = rf(column, value)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Currency)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(column, value)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewCurrencyRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewCurrencyRepository creates a new instance of CurrencyRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCurrencyRepository(t mockConstructorTestingTNewCurrencyRepository) *CurrencyRepository {
	mock := &CurrencyRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
