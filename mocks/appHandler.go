// Code generated by mockery v2.9.6. DO NOT EDIT.

package mocks

import (
	entities "github.com/felipepnascimento/challenge-bravo-flp/entities"
	gin "github.com/gin-gonic/gin"

	mock "github.com/stretchr/testify/mock"
)

// appHandler is an autogenerated mock type for the appHandler type
type appHandler struct {
	mock.Mock
}

// Execute provides a mock function with given fields: ctx
func (_m *appHandler) Execute(ctx *gin.Context) *entities.AppResult {
	ret := _m.Called(ctx)

	var r0 *entities.AppResult
	if rf, ok := ret.Get(0).(func(*gin.Context) *entities.AppResult); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.AppResult)
		}
	}

	return r0
}

type mockConstructorTestingTnewAppHandler interface {
	mock.TestingT
	Cleanup(func())
}

// newAppHandler creates a new instance of appHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func newAppHandler(t mockConstructorTestingTnewAppHandler) *appHandler {
	mock := &appHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
